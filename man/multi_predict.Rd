% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/C5_rules.R, R/aaa_multi_predict.R,
%   R/boost_tree.R, R/cubist_rules.R, R/linear_reg.R, R/logistic_reg.R,
%   R/mars.R, R/multinom_reg.R, R/nearest_neighbor.R, R/rule_fit.R
\name{multi_predict._C5_rules}
\alias{multi_predict._C5_rules}
\alias{multi_predict}
\alias{multi_predict.default}
\alias{multi_predict._xgb.Booster}
\alias{multi_predict._C5.0}
\alias{multi_predict._cubist}
\alias{multi_predict._elnet}
\alias{multi_predict._lognet}
\alias{multi_predict._earth}
\alias{multi_predict._multnet}
\alias{multi_predict._train.kknn}
\alias{multi_predict._xrf}
\title{Model predictions across many sub-models}
\usage{
\method{multi_predict}{`_C5_rules`}(object, new_data, type = NULL, trees = NULL, ...)

multi_predict(object, ...)

\method{multi_predict}{default}(object, ...)

\method{multi_predict}{`_xgb.Booster`}(object, new_data, type = NULL, trees = NULL, ...)

\method{multi_predict}{`_C5.0`}(object, new_data, type = NULL, trees = NULL, ...)

\method{multi_predict}{`_cubist`}(object, new_data, type = NULL, neighbors = NULL, ...)

\method{multi_predict}{`_elnet`}(object, new_data, type = NULL, penalty = NULL, ...)

\method{multi_predict}{`_lognet`}(object, new_data, type = NULL, penalty = NULL, ...)

\method{multi_predict}{`_earth`}(object, new_data, type = NULL, num_terms = NULL, ...)

\method{multi_predict}{`_multnet`}(object, new_data, type = NULL, penalty = NULL, ...)

\method{multi_predict}{`_train.kknn`}(object, new_data, type = NULL, neighbors = NULL, ...)

\method{multi_predict}{`_xrf`}(object, new_data, type = NULL, penalty = NULL, ...)
}
\arguments{
\item{object}{A \code{model_fit} object.}

\item{new_data}{A rectangular data object, such as a data frame.}

\item{type}{A single character value or \code{NULL}. Possible values are
\code{"numeric"}, \code{"class"}, \code{"prob"}, \code{"conf_int"}, \code{"pred_int"}, \code{"quantile"},
or \code{"raw"}. When \code{NULL}, \code{predict()} will choose an appropriate value
based on the model's mode.}

\item{trees}{An integer vector for the number of trees in the ensemble.}

\item{...}{Not currently used.}

\item{neighbors}{An integer vector for the number of nearest neighbors.}

\item{penalty}{Non-negative penalty values.}

\item{num_terms}{An integer vector for the number of MARS terms to retain.}
}
\value{
A tibble with one row for each row of \code{new_data}. Multiple
predictions are contained in a list column called \code{.pred}. That column has
the standard \code{parsnip} prediction column names as well as the column with
the tuning parameter values.

A tibble with the same number of rows as the data being predicted.
There is a list-column named \code{.pred} that contains tibbles with
multiple rows per sub-model. Note that, within the tibbles, the column names
follow the usual standard based on prediction \code{type} (i.e. \code{.pred_class} for
\code{type = "class"} and so on).
}
\description{
For some models, predictions can be made on sub-models in the model object.
}
\details{
For C5.0 rule-based models, the model fit may contain less boosting
iterations than the number requested. Printing the object will show how many
were used due to early stopping. This can be change using an option in
\code{\link[C50:C5.0Control]{C50::C5.0Control()}}. Beware that the number of iterations requested
}

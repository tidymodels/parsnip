% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/logistic_reg_h2o.R
\name{details_logistic_reg_h2o}
\alias{details_logistic_reg_h2o}
\title{Logistic regression via h2o}
\description{
\code{\link[h2o:h2o.glm]{h2o::h2o.glm()}} fits a generalized linear model for binary outcomes.
A linear combination of the predictors is used to model the log odds of an
event.
}
\details{
For this engine, there is a single mode: classification
\subsection{Tuning Parameters}{

This model has 2 tuning parameters:
\itemize{
\item \code{mixture}: Proportion of Lasso Penalty (type: double, default: 0)
\item \code{penalty}: Amount of Regularization (type: double, default: 0)
}
}

\subsection{Translation from parsnip to the original package}{

\code{agua} uses the \code{\link[agua:h2o_train]{agua::h2o_train_glm()}} wrapper
function for fitting the logistic regression model, which calls
\code{\link[h2o:h2o.glm]{h2o::h2o.glm()}}. h2o will automatically picks the
link function and distribution family or binomial responses.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{logistic_reg() \%>\% 
  set_engine("h2o") \%>\% 
  translate()
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode">}}\preformatted{## Logistic Regression Model Specification (classification)
## 
## Computational engine: h2o 
## 
## Model fit template:
## agua::h2o_train_glm(x = missing_arg(), y = missing_arg())
}\if{html}{\out{</div>}}

To use a non-default argument in \code{\link[h2o:h2o.glm]{h2o::h2o.glm()}},
pass in as an engine argument to \code{set_engine()}:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{logistic_reg() \%>\% 
  set_engine("h2o", compute_p_values = TRUE) \%>\% 
  translate()
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode">}}\preformatted{## Logistic Regression Model Specification (classification)
## 
## Engine-Specific Arguments:
##   compute_p_values = TRUE
## 
## Computational engine: h2o 
## 
## Model fit template:
## agua::h2o_train_glm(x = missing_arg(), y = missing_arg(), compute_p_values = TRUE)
}\if{html}{\out{</div>}}

Other h2o engine arguments of interest:
\itemize{
\item \code{solver}: The solver method used in optimization, the default
\code{"auto"} works well in most cases
}
}

\subsection{Preprocessing requirements}{

Factor/categorical predictors need to be converted to numeric values
(e.g., dummy or indicator variables) for this engine. When using the
formula method via \code{\link[=fit.model_spec]{fit()}}, parsnip
will convert factor columns to indicators.

Predictors should have the same scale. One way to achieve this is to
center and scale each so that each predictor has mean zero and a
variance of one.

By default, \code{\link[h2o:h2o.glm]{h2o::h2o.glm()}} uses the argument
\code{standardize = TRUE} to center and scale all numeric columns.
}
}
\keyword{internal}
